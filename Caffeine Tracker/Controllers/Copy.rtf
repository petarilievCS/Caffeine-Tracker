{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red252\green95\blue163;\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red208\green168\blue255;
\red161\green103\blue230;\red103\green183\blue164;\red161\green103\blue230;\red103\green183\blue164;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c81569\c65882\c100000;
\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c40392\c71765\c64314;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // Constants\cf4 \
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf6 defaultHeight\cf4 : \cf7 CGFloat\cf4  = \cf8 300\cf4 \
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf6 dismissibleHeight\cf4 : \cf7 CGFloat\cf4  = \cf8 200\cf4 \
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf6 maximumContainerHeight\cf4 : \cf7 CGFloat\cf4  = \cf8 300\cf4 \
    \cf2 // keep updated with new height\cf4 \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf6 currentContainerHeight\cf4 : \cf7 CGFloat\cf4  = \cf8 300\cf4 \
    \
    \cf2 // Setup default container view\cf4 \
    
\f1\b \cf5 lazy
\f0\b0 \cf4  
\f1\b \cf5 var
\f0\b0 \cf4  \cf6 containerView\cf4 : \cf9 UIView\cf4  = \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  view = \cf9 UIView\cf4 ()\
        view.\cf10 backgroundColor\cf4  = .\cf10 systemBackground\cf4 \
        view.\cf10 layer\cf4 .\cf10 cornerRadius\cf4  = \cf8 15\cf4 \
        view.\cf10 clipsToBounds\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        
\f1\b \cf5 return
\f0\b0 \cf4  view\
    \}()\
    \
    \cf2 // Setup background dimmed view\cf4 \
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf6 maxDimmedAlpha\cf4 : \cf7 CGFloat\cf4  = \cf8 0.5\cf4 \
    
\f1\b \cf5 lazy
\f0\b0 \cf4  
\f1\b \cf5 var
\f0\b0 \cf4  \cf6 dimmedView\cf4 : \cf9 UIView\cf4  = \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  view = \cf9 UIView\cf4 ()\
        view.\cf10 backgroundColor\cf4  = .\cf10 black\cf4 \
        view.\cf10 alpha\cf4  = \cf11 maxDimmedAlpha\cf4 \
        
\f1\b \cf5 return
\f0\b0 \cf4  view\
    \}()\
\
    \
    \cf2 // 3. Dynamic container constraint\cf4 \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf6 containerViewHeightConstraint\cf4 : \cf9 NSLayoutConstraint\cf4 ?\
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf6 containerViewBottomConstraint\cf4 : \cf9 NSLayoutConstraint\cf4 ?\
    \
    
\f1\b \cf5 override
\f0\b0 \cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 viewDidLoad\cf4 () \{\
        
\f1\b \cf5 super
\f0\b0 \cf4 .\cf12 viewDidLoad\cf4 ()\
        \cf13 setupView\cf4 ()\
        \cf13 setupConstraints\cf4 ()\
        \cf13 setupPanGesture\cf4 ()\
    \}\
    \
    
\f1\b \cf5 override
\f0\b0 \cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 viewDidAppear\cf4 (\cf6 _\cf4  animated: \cf7 Bool\cf4 ) \{\
        
\f1\b \cf5 super
\f0\b0 \cf4 .\cf12 viewDidAppear\cf4 (
\f1\b \cf5 true
\f0\b0 \cf4 )\
        \cf13 animateShowDimmedView\cf4 ()\
        \cf13 animatePresentContainer\cf4 ()\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 setupView\cf4 () \{\
        \cf10 view\cf4 .\cf10 backgroundColor\cf4  = .\cf10 clear\cf4 \
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 setupConstraints\cf4 () \{\
        \cf2 // 4. Add subviews\cf4 \
        \cf10 view\cf4 .\cf12 addSubview\cf4 (\cf11 dimmedView\cf4 )\
        \cf10 view\cf4 .\cf12 addSubview\cf4 (\cf11 containerView\cf4 )\
        \cf11 dimmedView\cf4 .\cf10 translatesAutoresizingMaskIntoConstraints\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        \cf11 containerView\cf4 .\cf10 translatesAutoresizingMaskIntoConstraints\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        \
        \cf2 // 5. Set static constraints\cf4 \
        \cf9 NSLayoutConstraint\cf4 .\cf12 activate\cf4 ([\
            \cf2 // set dimmedView edges to superview\cf4 \
            \cf11 dimmedView\cf4 .\cf10 topAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 topAnchor\cf4 ),\
            \cf11 dimmedView\cf4 .\cf10 bottomAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 bottomAnchor\cf4 ),\
            \cf11 dimmedView\cf4 .\cf10 leadingAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 leadingAnchor\cf4 ),\
            \cf11 dimmedView\cf4 .\cf10 trailingAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 trailingAnchor\cf4 ),\
            \cf2 // set container static constraint (trailing & leading)\cf4 \
            \cf11 containerView\cf4 .\cf10 leadingAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 leadingAnchor\cf4 ),\
            \cf11 containerView\cf4 .\cf10 trailingAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 trailingAnchor\cf4 ),\
        ])\
        \
        \cf2 // 6. Set container to default height\cf4 \
        \cf11 containerViewHeightConstraint\cf4  = \cf11 containerView\cf4 .\cf10 heightAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalToConstant\cf4 : \cf11 defaultHeight\cf4 )\
        \cf2 // 7. Set bottom constant to 0\cf4 \
        \cf11 containerViewBottomConstraint\cf4  = \cf11 containerView\cf4 .\cf10 bottomAnchor\cf4 .\cf12 constraint\cf4 (\cf12 equalTo\cf4 : \cf10 view\cf4 .\cf10 bottomAnchor\cf4 , \cf12 constant\cf4 : \cf11 defaultHeight\cf4 )\
        \cf2 // Activate constraints\cf4 \
        \cf11 containerViewHeightConstraint\cf4 ?.\cf10 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \cf11 containerViewBottomConstraint\cf4 ?.\cf10 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
    \}\
    \
    \cf2 // Animates the presentation\cf4 \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 animatePresentContainer\cf4 () \{\
        \cf2 // Update bottom constraint in animation block\cf4 \
        \cf9 UIView\cf4 .\cf12 animate\cf4 (\cf12 withDuration\cf4 : \cf8 0.3\cf4 ) \{\
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 containerViewBottomConstraint\cf4 ?.\cf10 constant\cf4  = \cf8 0\cf4 \
            \cf2 // Call this to trigger refresh constraint\cf4 \
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf10 view\cf4 .\cf12 layoutIfNeeded\cf4 ()\
        \}\
    \}\
    \
    \cf2 // Animate the dimmed view\cf4 \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 animateShowDimmedView\cf4 () \{\
        \cf11 dimmedView\cf4 .\cf10 alpha\cf4  = \cf8 0\cf4 \
        \cf9 UIView\cf4 .\cf12 animate\cf4 (\cf12 withDuration\cf4 : \cf8 0.4\cf4 ) \{\
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 dimmedView\cf4 .\cf10 alpha\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 maxDimmedAlpha\cf4 \
        \}\
    \}\
    \
    \cf2 // Dismiss the view\cf4 \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 animateDismissView\cf4 () \{\
        \cf2 // hide main container view by updating bottom constraint in animation block\cf4 \
        \cf9 UIView\cf4 .\cf12 animate\cf4 (\cf12 withDuration\cf4 : \cf8 0.3\cf4 ) \{\
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 containerViewBottomConstraint\cf4 ?.\cf10 constant\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 defaultHeight\cf4 \
            \cf2 // call this to trigger refresh constraint\cf4 \
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf10 view\cf4 .\cf12 layoutIfNeeded\cf4 ()\
        \}\
        \
        \cf2 // hide blur view\cf4 \
        \cf11 dimmedView\cf4 .\cf10 alpha\cf4  = \cf11 maxDimmedAlpha\cf4 \
        \cf9 UIView\cf4 .\cf12 animate\cf4 (\cf12 withDuration\cf4 : \cf8 0.4\cf4 ) \{\
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 dimmedView\cf4 .\cf10 alpha\cf4  = \cf8 0\cf4 \
        \} completion: \{ _ 
\f1\b \cf5 in
\f0\b0 \cf4 \
            \cf2 // once done, dismiss without animation\cf4 \
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 dismiss\cf4 (\cf12 animated\cf4 : 
\f1\b \cf5 false
\f0\b0 \cf4 )\
        \}\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 setupPanGesture\cf4 () \{\
        \cf2 // add pan gesture recognizer to the view controller's view (the whole screen)\cf4 \
        
\f1\b \cf5 let
\f0\b0 \cf4  panGesture = \cf9 UIPanGestureRecognizer\cf4 (\cf9 target\cf4 : 
\f1\b \cf5 self
\f0\b0 \cf4 , \cf9 action\cf4 : 
\f1\b \cf5 #selector
\f0\b0 \cf4 (
\f1\b \cf5 self
\f0\b0 \cf4 .\cf13 handlePanGesture\cf4 (\cf13 gesture\cf4 :)))\
        \cf2 // change to false to immediately listen on gesture movement\cf4 \
        panGesture.\cf10 delaysTouchesBegan\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        panGesture.\cf10 delaysTouchesEnded\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        \cf10 view\cf4 .\cf12 addGestureRecognizer\cf4 (panGesture)\
    \}\
    \
    
\f1\b \cf5 @objc
\f0\b0 \cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 handlePanGesture\cf4 (\cf6 gesture\cf4 : \cf9 UIPanGestureRecognizer\cf4 ) \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  translation = gesture.\cf12 translation\cf4 (\cf12 in\cf4 : \cf10 view\cf4 )\
        \cf2 // Drag to top will be minus value and vice versa\cf4 \
\
        \cf2 // Get drag direction\cf4 \
        
\f1\b \cf5 let
\f0\b0 \cf4  isDraggingDown = translation.\cf10 y\cf4  > \cf8 0\cf4 \
\
        \cf2 // New height is based on value of dragging plus current container height\cf4 \
        
\f1\b \cf5 let
\f0\b0 \cf4  newHeight = \cf11 currentContainerHeight\cf4  - translation.\cf10 y\cf4 \
\
        \cf2 // Handle based on gesture state\cf4 \
        
\f1\b \cf5 switch
\f0\b0 \cf4  gesture.\cf10 state\cf4  \{\
        
\f1\b \cf5 case
\f0\b0 \cf4  .\cf10 changed\cf4 :\
            \cf2 // This state will occur when user is dragging\cf4 \
            
\f1\b \cf5 if
\f0\b0 \cf4  newHeight < \cf11 maximumContainerHeight\cf4  \{\
                \cf2 // Keep updating the height constraint\cf4 \
                \cf11 containerViewHeightConstraint\cf4 ?.\cf10 constant\cf4  = newHeight\
                \cf2 // refresh layout\cf4 \
                \cf10 view\cf4 .\cf12 layoutIfNeeded\cf4 ()\
            \}\
        
\f1\b \cf5 case
\f0\b0 \cf4  .\cf10 ended\cf4 :\
            \cf2 // This happens when user stop drag,\cf4 \
            \cf2 // so we will get the last height of container\cf4 \
            \cf2 // Condition 1: If new height is below min, dismiss controller\cf4 \
            
\f1\b \cf5 if
\f0\b0 \cf4  newHeight < \cf11 dismissibleHeight\cf4  \{\
                
\f1\b \cf5 self
\f0\b0 \cf4 .\cf13 animateDismissView\cf4 ()\
            \}\
            
\f1\b \cf5 else
\f0\b0 \cf4  
\f1\b \cf5 if
\f0\b0 \cf4  newHeight < \cf11 defaultHeight\cf4  \{\
                \cf2 // Condition 2: If new height is below default, animate back to default\cf4 \
                \cf13 animateContainerHeight\cf4 (\cf11 defaultHeight\cf4 )\
            \}\
            
\f1\b \cf5 else
\f0\b0 \cf4  
\f1\b \cf5 if
\f0\b0 \cf4  newHeight < \cf11 maximumContainerHeight\cf4  && isDraggingDown \{\
                \cf2 // Condition 3: If new height is below max and going down, set to default height\cf4 \
                \cf13 animateContainerHeight\cf4 (\cf11 defaultHeight\cf4 )\
            \}\
            
\f1\b \cf5 else
\f0\b0 \cf4  
\f1\b \cf5 if
\f0\b0 \cf4  newHeight > \cf11 defaultHeight\cf4  && !isDraggingDown \{\
                \cf2 // Condition 4: If new height is below max and going up, set to max height at top\cf4 \
                \cf13 animateContainerHeight\cf4 (\cf11 maximumContainerHeight\cf4 )\
            \}\
        
\f1\b \cf5 default
\f0\b0 \cf4 :\
            
\f1\b \cf5 break
\f0\b0 \cf4 \
        \}\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf6 animateContainerHeight\cf4 (\cf6 _\cf4  height: \cf7 CGFloat\cf4 ) \{\
        \cf9 UIView\cf4 .\cf12 animate\cf4 (\cf12 withDuration\cf4 : \cf8 0.4\cf4 ) \{\
            \cf2 // Update container height\cf4 \
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 containerViewHeightConstraint\cf4 ?.\cf10 constant\cf4  = height\
            \cf2 // Call this to trigger refresh constraint\cf4 \
            
\f1\b \cf5 self
\f0\b0 \cf4 .\cf10 view\cf4 .\cf12 layoutIfNeeded\cf4 ()\
        \}\
        \cf2 // Save current height\cf4 \
        \cf11 currentContainerHeight\cf4  = height\
    \}\
}